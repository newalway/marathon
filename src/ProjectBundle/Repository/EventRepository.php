<?php

namespace ProjectBundle\Repository;

use Symfony\Component\Intl\Locale;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
	private $qb;

	public function findAllData($arr_query_data=false, $locale=false)
    {
		$locale = ($locale) ? $locale : Locale::getDefault();
  		$this->qb = $this->createQueryBuilder('e');

		//join translation
		$this->qb->join('e.translations', 'et')
				->select('e', 'et')
				->orderBy('e.position', 'ASC')
				->addOrderBy('e.createdAt', 'DESC');

		$this->qb->addSelect('ec', 'ect')
			->leftJoin('e.eventCategory', 'ec')
			->leftJoin('ec.translations', 'ect');

  		if(isset($arr_query_data['q']) && $arr_query_data['q']){
			//search from translation
  			$this->qb->where($this->qb->expr()->orX(
	  	      	$this->qb->expr()->like('et.title', ':query')
	  			// $this->qb->expr()->like('evt.description', ':query')
			))
  			->setParameter('query', '%'.$arr_query_data['q'].'%');
  		}

		if(isset($arr_query_data['eventCategory']) && $arr_query_data['eventCategory']){
			$this->qb->andWhere('ec.id = :event_category_id')
				->setParameter('event_category_id', $arr_query_data['eventCategory']);
		}

  		return $this->qb;
    }

	public function setPublic()
    {
        $this->qb->andWhere('NOW() >= e.publicDate')
                ->andWhere('e.status = 1');
    }

	public function findAllActiveData($arr_query_data=false, $locale=false)
    {
		$this->findAllData($arr_query_data, $locale);
		$this->setPublic();
		return $this->qb;
	}

	public function findActiveDataByCategory($arr_query_data=false, $locale=false, $catObj)
	{
		$this->findAllActiveData($arr_query_data, $locale);

		$this->qb->andWhere($this->qb->expr()->andX(
			$this->qb->expr()->eq('e.eventCategory', ':catObj')
		))
		->setParameter('catObj',$catObj)
		->andWhere('ec.status = 1');

		// $this->qb->where($this->qb->expr()->andX(
		// 		$this->qb->expr()->eq('ec.id', ':catObj')
		// ))

		return $this->qb;
	}

	public function findActiveDataByEvent($arr_query_data=false, $locale=false, $eventObj)
	{
		$this->findAllActiveData($arr_query_data, $locale);

		$this->qb->andWhere($this->qb->expr()->andX(
			$this->qb->expr()->eq('e.id', ':eventObj')
		))
		->setParameter('eventObj',$eventObj)
		->andWhere('ec.status = 1');

		return $this->qb;
	}

	public function getActiveDataByRecent($arr_query_data=false, $locale=false, $eventObj)
	{
		$catObj = $eventObj->getEventCategory();
		$this->findActiveDataByCategory($arr_query_data, $locale,$catObj);


		$this->qb->andWhere($this->qb->expr()->andX(
			$this->qb->expr()->notLike('e.id', ':eventObj')

		))
		->setParameter('eventObj',$eventObj)
		 //->setParameter('catObj',$catObj)
		->andWhere('ec.status = 1');

		return $this->qb;
	}


}
