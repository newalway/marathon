<?php

namespace ProjectBundle\Repository;
use ProjectBundle\Entity\Product;

/**
 * SkuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkuRepository extends \Doctrine\ORM\EntityRepository
{
	public function setClearDefaultOptionValue(Product $product)
	{
		$qb = $this->createQueryBuilder('p');
		$qb->update()
		        ->set('p.defaultOption', 0)
				->where('p.product = :product')
		        ->setParameter('product', $product);
		$qb->getQuery()->execute();
	}

	public function getActiveDataBySkuId($sku_id)
	{
		return $this->createQueryBuilder('s')
					->where('s.id = :sku_id')
					->andWhere('s.status = 1')
					->setParameter('sku_id', $sku_id);
	}

	public function getActiveDataJoinedProductBySkuId($sku_id)
	{
		$qb = $this->createQueryBuilder('s')
					->leftjoin('s.product', 'p')
					->where('s.id = :sku_id')
					->andWhere('s.status = 1')
					->setParameter('sku_id', $sku_id);

		$qb->andWhere('NOW() >= p.publishDate')
            ->andWhere($qb->expr()->andX(
                $qb->expr()->eq('p.status', ':status')
            ))
            ->setParameter('status', 1);
		return $qb;
	}

	public function getActiveDataByProduct($product)
	{
		$qb = $this->createQueryBuilder('s')
					->innerJoin('s.product', 'p')
					->where('s.product = :product')
					->andWhere('s.status = 1')
					->setParameter('product', $product);
		$qb->andWhere('NOW() >= p.publishDate')
            ->andWhere($qb->expr()->andX(
                $qb->expr()->eq('p.status', ':status')
            ))
            ->setParameter('status', 1);
		return $qb;
	}

	public function getActiveIsInventoryPolicyByProduct($product, $low_stock_min_qty=false)
	{
		$qb = $this->getActiveDataByProduct($product);
		$qb->andWhere('s.inventoryPolicyStatus = 1');

		if($low_stock_min_qty){
			$qb->andWhere('s.inventoryQuantity <= :min_qty')
				->setParameter('min_qty', $low_stock_min_qty);
		}
		return $qb;
	}

}
