<?php

namespace ProjectBundle\Repository;
use ProjectBundle\Entity\User;
/**
 * DeliveryAddressRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryAddressRepository extends \Doctrine\ORM\EntityRepository
{
    public function findDataById($id, $user=null)
    {
        //QueryBuilder Expr
        $qb = $this->createQueryBuilder('da')
            ->select('da, c')
            ->leftJoin('da.user','u')
            ->leftJoin('da.countryCode', 'c')
            ->where('da.id = :id')
            ->andWhere('da.	deleted = :del_flag')
            ->setParameter('id', $id)
            ->setParameter('del_flag',0);

        if($user){
            $qb->andWhere('u.id = :user')
                ->setParameter('user',$user);
        }
        return $qb;
    }

    public function findAllDataByUserIdWithCountry($user)
    {
        $qb = $this->findAllDataById($user)
                ->select('da, c');
        return $qb;
    }

    public function findAllDataById($user)
    {
        //QueryBuilder Expr
        $qb = $this->createQueryBuilder('da')
        //join translation
        ->leftJoin('da.user','u')
        ->leftJoin('da.countryCode', 'c')
        ->where('u.id = :user')
        ->andWhere('da.	deleted = :del_flag')
        ->addOrderBy('da.defaultShipping', 'DESC')
        ->addOrderBy('da.defaultTax', 'DESC')
        ->addOrderBy('da.createdAt', 'DESC')
        ->setParameter('user',$user)
        ->setParameter('del_flag',0);
        return $qb;
    }

    public function findDefaultShippingAddressById($user){
        $qb = $this->findAllDataById($user)
            ->select('da, c')
            ->andWhere('da.defaultShipping = :value')
            ->setParameter('value',1);
        return $qb;
    }

    public function findDefaultBillingAddressById($user){
        $qb = $this->findAllDataById($user)
            ->select('da, c')
            ->andWhere('da.defaultTax = :value')
            ->setParameter('value',1);
        return $qb;
    }

    public function setClearDefaultShippingValue(User $user)
    {
        $qb = $this->createQueryBuilder('da');
        $qb->update()
                ->set('da.defaultShipping', 0)
                ->where('da.user = :user')
                ->setParameter('user', $user);
        $qb->getQuery()->execute();
    }
    public function setClearDefaultTaxValue(User $user)
    {
        $qb = $this->createQueryBuilder('da');
        $qb->update()
                ->set('da.defaultTax', 0)
                ->where('da.user = :user')
                ->setParameter('user', $user);
        $qb->getQuery()->execute();
    }
}
